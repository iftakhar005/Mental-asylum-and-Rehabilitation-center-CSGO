================================================================================
    PASSWORD HASHING - COMPREHENSIVE EXPLANATION
    Mental Asylum and Rehabilitation Center System
================================================================================
    Generated: 2025-10-21
    System: MindCare Mental Health System
    Security: Bcrypt Password Hashing with PHP password_hash()
================================================================================

TABLE OF CONTENTS
================================================================================
1. OVERVIEW OF PASSWORD HASHING
2. HASHING ALGORITHM USED
3. WHERE PASSWORDS ARE HASHED
4. HOW PASSWORD HASHING WORKS
5. PASSWORD VERIFICATION PROCESS
6. SECURITY FEATURES
7. CODE IMPLEMENTATION EXAMPLES
8. DATABASE STORAGE
9. COMPLETE FLOW DIAGRAMS
10. SECURITY BEST PRACTICES

================================================================================
SECTION 1: OVERVIEW OF PASSWORD HASHING
================================================================================

WHAT IS PASSWORD HASHING?
--------------------------------------------------------------------------------
Password hashing is a one-way cryptographic function that converts a plain-text
password into a fixed-length string of characters (hash) that cannot be reversed
back to the original password.

WHY HASH PASSWORDS?
--------------------------------------------------------------------------------
✅ Security: Even if database is compromised, passwords cannot be recovered
✅ One-way: Hash cannot be reversed to get original password
✅ Unique: Same password with different salts produces different hashes
✅ Compliance: Required by security standards (HIPAA, GDPR, PCI-DSS)

HOW IT WORKS IN THIS SYSTEM:
--------------------------------------------------------------------------------
1. User provides password during signup/registration
2. System hashes password using PHP's password_hash() function
3. Hash is stored in database (NOT the plain password)
4. During login, user provides password
5. System hashes provided password and compares with stored hash
6. If hashes match, authentication succeeds

PLAIN TEXT vs HASHED PASSWORD:
--------------------------------------------------------------------------------
Plain Password:  "MySecurePass123!"
Hashed Password: "$2y$10$abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGH"

Characteristics:
- Fixed length (60 characters for bcrypt)
- Contains algorithm identifier ($2y$)
- Contains cost parameter ($10$)
- Contains salt (automatically generated)
- Includes hash value

================================================================================
SECTION 2: HASHING ALGORITHM USED
================================================================================

PHP PASSWORD_HASH() FUNCTION
--------------------------------------------------------------------------------
Function: password_hash($password, PASSWORD_DEFAULT)
Algorithm: Bcrypt (as of PHP 7.x and 8.x)
Cost: 10 (default - means 2^10 = 1,024 iterations)

WHAT IS BCRYPT?
--------------------------------------------------------------------------------
Bcrypt is a password hashing algorithm designed specifically for passwords:

Key Features:
1. **Slow by design**: Makes brute-force attacks impractical
2. **Adaptive**: Cost can be increased as computers get faster
3. **Salt included**: Automatically generates and stores salt in hash
4. **One-way**: Cannot be reversed to get original password
5. **Industry standard**: Used by major tech companies

BCRYPT HASH STRUCTURE:
--------------------------------------------------------------------------------
Hash Format: $2y$10$saltsaltsaltsaltsalthashhashhashhashhashhashhash

Breakdown:
- $2y$    : Algorithm identifier (bcrypt)
- 10      : Cost parameter (2^10 = 1024 rounds)
- salt... : 22-character salt (randomly generated)
- hash... : 31-character hash value

Example:
$2y$10$N9qo8uLOickgx2ZMRZoMyeIjZAgcfl7p92ldGxad68LJZdL17lhWy
│  │  │                                                      │
│  │  └─ Salt (22 chars) ──────────────────────────────────┘
│  └─ Cost (10)
└─ Algorithm (bcrypt 2y)

================================================================================
SECTION 3: WHERE PASSWORDS ARE HASHED
================================================================================

PASSWORD HASHING LOCATIONS IN CODE
--------------------------------------------------------------------------------

1. USER SIGNUP/REGISTRATION
   File: signup.php
   Line: 39
   Code: $hashed_password = password_hash($password, PASSWORD_DEFAULT);

2. STAFF REGISTRATION - DOCTORS
   File: add_doctor.php
   Line: 94
   Code: $hashed_password = password_hash($temp_password, PASSWORD_DEFAULT);

3. STAFF REGISTRATION - NURSES
   File: add_nurse.php
   Line: 91
   Code: $hashed_password = password_hash($temp_password, PASSWORD_DEFAULT);

4. STAFF REGISTRATION - THERAPISTS
   File: add_therapist.php
   Line: 94
   Code: $hashed_password = password_hash($temp_password, PASSWORD_DEFAULT);

5. STAFF REGISTRATION - CHIEF STAFF
   File: add_chief_staff.php
   Line: 89
   Code: $hashed_password = password_hash($temp_password, PASSWORD_DEFAULT);

6. ADMIN PASSWORD CHANGE
   File: change_admin_password.php
   Line: 10
   Code: $password_hash = password_hash($new_password, PASSWORD_DEFAULT);

PASSWORD VERIFICATION LOCATIONS
--------------------------------------------------------------------------------

1. USER LOGIN
   File: index.php
   Line: 153, 229
   Code: if (password_verify($password, $staff_data['password_hash']))

WHERE HASHES ARE STORED
--------------------------------------------------------------------------------

1. Database Table: users
   Column: password_hash (VARCHAR(255))
   Used for: Admin, general users, patients

2. Database Table: staff
   Column: password_hash (VARCHAR(255))
   Used for: Doctors, nurses, therapists, chief-staff, receptionists

================================================================================
SECTION 4: HOW PASSWORD HASHING WORKS
================================================================================

STEP-BY-STEP HASHING PROCESS
--------------------------------------------------------------------------------

EXAMPLE: User Registration in signup.php

1. USER SUBMITS FORM
   Username: johndoe@email.com
   Password: MySecurePass123!

2. SERVER RECEIVES DATA
   ```php
   $password = $_POST['password']; // "MySecurePass123!"
   ```

3. VALIDATION CHECKS
   ```php
   if (strlen($password) < 8) {
       $signup_error = 'Password must be at least 8 characters.';
   }
   ```

4. PASSWORD HASHING (Line 39)
   ```php
   $hashed_password = password_hash($password, PASSWORD_DEFAULT);
   ```
   
   Input:  "MySecurePass123!"
   Output: "$2y$10$N9qo8uLOickgx2ZMRZoMyeIjZAgcfl7p92ldGxad68LJZdL17lhWy"

5. STORE IN DATABASE (Line 40-42)
   ```php
   $stmt = $conn->prepare(
       "INSERT INTO users (username, password_hash, email, role) 
        VALUES (?, ?, ?, ?)"
   );
   $stmt->bind_param("ssss", $username, $hashed_password, $email, $role);
   $stmt->execute();
   ```

6. DATABASE RECORD CREATED
   ```
   users table:
   +-----------+----------------------------------------------------------+
   | username  | password_hash                                            |
   +-----------+----------------------------------------------------------+
   | johndoe   | $2y$10$N9qo8uLOickgx2ZMRZoMyeIjZAgcfl7p92ldGxad68... |
   +-----------+----------------------------------------------------------+
   ```

WHAT HAPPENS DURING HASHING:
--------------------------------------------------------------------------------

1. **Salt Generation**
   - PHP automatically generates a random 22-character salt
   - Salt ensures same password produces different hashes
   - Example: "N9qo8uLOickgx2ZMRZoMye"

2. **Cost Factor Application**
   - Default cost = 10 (means 2^10 = 1,024 rounds)
   - Password + Salt run through bcrypt 1,024 times
   - Makes brute-force attacks computationally expensive

3. **Hash Generation**
   - Bcrypt algorithm combines password + salt + cost
   - Produces 31-character hash value
   - Example: "IjZAgcfl7p92ldGxad68LJZdL17lhWy"

4. **Final Hash Format**
   - Algorithm + Cost + Salt + Hash combined
   - Result: "$2y$10$saltsalt...hashhash..."
   - Length: Always 60 characters for bcrypt

TIME TO HASH:
-------------
- Single password: ~50-100 milliseconds
- This is INTENTIONALLY slow (security feature)
- Brute-force attack: Would take YEARS to crack

================================================================================
SECTION 5: PASSWORD VERIFICATION PROCESS
================================================================================

HOW LOGIN WORKS WITH HASHED PASSWORDS
--------------------------------------------------------------------------------

File: index.php
Function: processLogin()
Lines: 138-379

STEP-BY-STEP LOGIN FLOW:

1. USER SUBMITS LOGIN FORM
   Email: johndoe@email.com
   Password: MySecurePass123!

2. RETRIEVE HASHED PASSWORD FROM DATABASE
   ```php
   $result = $securityManager->secureSelect(
       "SELECT staff_id, full_name, password_hash, role 
        FROM staff WHERE email = ?",
       [$email],
       's'
   );
   $staff_data = $result->fetch_assoc();
   ```
   
   Retrieved from DB:
   password_hash = "$2y$10$N9qo8uLOickgx2ZMRZoMyeIjZAgcfl7p92ldGxad68LJZdL17lhWy"

3. VERIFY PASSWORD (Line 153)
   ```php
   if (password_verify($password, $staff_data['password_hash'])) {
       // Password correct - login successful
   }
   ```

4. VERIFICATION PROCESS (Inside password_verify)
   a. Extract salt from stored hash
   b. Hash provided password with same salt
   c. Compare newly generated hash with stored hash
   d. Return true if match, false if no match

5. RESULT
   - Match → Login successful, create session
   - No match → Login failed, show error

PASSWORD_VERIFY() FUNCTION EXPLAINED:
--------------------------------------------------------------------------------

```php
password_verify($password, $hash)
```

Parameters:
- $password: Plain-text password provided by user
- $hash: Hashed password from database

Returns:
- true: Password matches
- false: Password does not match

How it works internally:
1. Extracts algorithm, cost, and salt from $hash
2. Hashes $password using same algorithm, cost, and salt
3. Compares result with hash portion of $hash
4. Uses timing-safe comparison (prevents timing attacks)

Example:
```php
$password = "MySecurePass123!";
$stored_hash = "$2y$10$N9qo8uLOickgx2ZMRZoMyeIjZAgcfl7p92ldGxad68LJZdL17lhWy";

if (password_verify($password, $stored_hash)) {
    echo "Password correct!";
} else {
    echo "Password incorrect!";
}
```

================================================================================
SECTION 6: SECURITY FEATURES
================================================================================

BUILT-IN SECURITY FEATURES OF password_hash()
--------------------------------------------------------------------------------

1. AUTOMATIC SALT GENERATION ✓
   - New random salt for every password
   - Prevents rainbow table attacks
   - Salt stored in hash (no separate storage needed)

2. COST FACTOR (WORK FACTOR) ✓
   - Default cost = 10 (1,024 iterations)
   - Can be increased as computers get faster
   - Makes brute-force attacks impractical

3. TIMING-SAFE COMPARISON ✓
   - password_verify() uses timing-safe comparison
   - Prevents timing attacks
   - Takes same time regardless of result

4. ALGORITHM FLEXIBILITY ✓
   - PASSWORD_DEFAULT uses best available algorithm
   - Currently bcrypt, may upgrade in future PHP versions
   - Hashes remain compatible after upgrade

5. ONE-WAY FUNCTION ✓
   - Cannot reverse hash to get password
   - Even database administrators can't see passwords
   - Only way to "crack" is brute-force guessing

ADDITIONAL SECURITY MEASURES IN THIS SYSTEM:
--------------------------------------------------------------------------------

1. PASSWORD LENGTH REQUIREMENT
   ```php
   if (strlen($password) < 8) {
       $signup_error = 'Password must be at least 8 characters.';
   }
   ```

2. PASSWORD CONFIRMATION
   ```php
   if ($password !== $confirmPassword) {
       $signup_error = 'Passwords do not match.';
   }
   ```

3. PREPARED STATEMENTS (SQL INJECTION PREVENTION)
   ```php
   $stmt = $conn->prepare(
       "INSERT INTO users (username, password_hash, email, role) 
        VALUES (?, ?, ?, ?)"
   );
   ```

4. SECURE PASSWORD TRANSMISSION
   - Forms use POST method (not GET)
   - HTTPS recommended for production
   - Passwords never logged or displayed

5. RATE LIMITING (In security_manager.php)
   - Limits login attempts
   - Prevents brute-force attacks
   - Implements CAPTCHA after 3 failed attempts

================================================================================
SECTION 7: CODE IMPLEMENTATION EXAMPLES
================================================================================

EXAMPLE 1: USER REGISTRATION (signup.php)
--------------------------------------------------------------------------------

```php
// Line 10-52
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $password = $_POST['password'] ?? '';
    $confirmPassword = $_POST['confirmPassword'] ?? '';
    
    // Validation
    if ($password !== $confirmPassword) {
        $signup_error = 'Passwords do not match.';
    } elseif (strlen($password) < 8) {
        $signup_error = 'Password must be at least 8 characters.';
    } else {
        // ✅ HASH PASSWORD
        $hashed_password = password_hash($password, PASSWORD_DEFAULT);
        
        // ✅ STORE HASH IN DATABASE (NOT PLAIN PASSWORD)
        $stmt = $conn->prepare(
            "INSERT INTO users (username, password_hash, email, role) 
             VALUES (?, ?, ?, ?)"
        );
        $stmt->bind_param("ssss", $username, $hashed_password, $email, $role);
        $stmt->execute();
    }
}
```

Key Points:
- Password never stored in plain text
- Hash generated immediately before database insert
- Hash is 60 characters long
- Same password will produce different hashes (different salts)

--------------------------------------------------------------------------------

EXAMPLE 2: STAFF REGISTRATION (add_doctor.php)
--------------------------------------------------------------------------------

```php
// Lines 66-94
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $full_name = $_POST['full_name'];
    $phone = $_POST['phone'];
    $email = $_POST['email'];
    
    // Generate temporary password
    $temp_password = 'Doctor' . rand(1000, 9999);
    
    // ✅ HASH THE TEMPORARY PASSWORD
    $hashed_password = password_hash($temp_password, PASSWORD_DEFAULT);
    
    // ✅ INSERT INTO DATABASE
    $sql_user = "INSERT INTO users 
                 (username, password_hash, email, role, ...) 
                 VALUES ('$staff_id', '$hashed_password', '$email', 'doctor', ...)";
    
    // ✅ ALSO STORE IN STAFF TABLE
    $sql = "INSERT INTO staff 
            (staff_id, full_name, ..., password_hash, temp_password, ...) 
            VALUES ('$staff_id', '$full_name', ..., '$hashed_password', 
                    '$temp_password', ...)";
}
```

Key Points:
- Temporary password generated automatically
- Temporary password hashed before storage
- Plain temporary password stored separately (for email to user)
- User should change password on first login

--------------------------------------------------------------------------------

EXAMPLE 3: LOGIN VERIFICATION (index.php)
--------------------------------------------------------------------------------

```php
// Lines 146-165
function processLogin($email, $password, $remember) {
    global $securityManager, $conn;
    
    // ✅ RETRIEVE USER DATA INCLUDING HASHED PASSWORD
    $result = $securityManager->secureSelect(
        "SELECT staff_id, full_name, password_hash, role 
         FROM staff WHERE email = ?",
        [$email],
        's'
    );
    
    if ($result->num_rows === 1) {
        $staff_data = $result->fetch_assoc();
        
        // ✅ VERIFY PASSWORD AGAINST HASH
        if (password_verify($password, $staff_data['password_hash'])) {
            // ✅ PASSWORD CORRECT - LOGIN SUCCESSFUL
            $_SESSION['user_id'] = $user_id;
            $_SESSION['username'] = $staff_data['full_name'];
            $_SESSION['role'] = $staff_data['role'];
            
            // Redirect to dashboard
            header('Location: doctor_dashboard.php');
            exit();
        } else {
            // ❌ PASSWORD INCORRECT
            $login_error = 'Invalid email or password.';
            return false;
        }
    }
}
```

Key Points:
- Plain password from form compared with hashed password from DB
- password_verify() handles extraction of salt and re-hashing
- No need to manually handle salt or algorithm details
- Constant-time comparison prevents timing attacks

--------------------------------------------------------------------------------

EXAMPLE 4: PASSWORD CHANGE (change_admin_password.php)
--------------------------------------------------------------------------------

```php
// Lines 1-25
$new_password = 'SecureAdminPass123!';

// ✅ HASH NEW PASSWORD
$password_hash = password_hash($new_password, PASSWORD_DEFAULT);

// ✅ UPDATE DATABASE WITH NEW HASH
$stmt = $conn->prepare(
    "UPDATE users SET password_hash = ? WHERE role = 'admin'"
);
$stmt->bind_param('s', $password_hash);

if ($stmt->execute()) {
    echo "Admin password updated successfully!";
    echo "New password: $new_password";
} else {
    echo "Error: " . $stmt->error;
}

$stmt->close();
$conn->close();
```

Key Points:
- Old password not needed (admin utility)
- New password hashed before update
- Uses prepared statement for security
- Displays new password (for admin setup only)

================================================================================
SECTION 8: DATABASE STORAGE
================================================================================

DATABASE SCHEMA FOR PASSWORD STORAGE
--------------------------------------------------------------------------------

TABLE 1: users
--------------
```sql
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    role VARCHAR(50) NOT NULL,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    contact_number VARCHAR(20),
    two_factor_enabled TINYINT(1) DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

Key Points:
- password_hash column is VARCHAR(255)
- 255 characters accommodates current (60 chars) and future algorithms
- Stores complete hash including algorithm, cost, salt

TABLE 2: staff
--------------
```sql
CREATE TABLE staff (
    id INT AUTO_INCREMENT PRIMARY KEY,
    staff_id VARCHAR(50) NOT NULL UNIQUE,
    full_name VARCHAR(255) NOT NULL,
    role VARCHAR(50) NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    user_id INT,
    temp_password VARCHAR(50),
    two_factor_enabled TINYINT(1) DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

Key Points:
- password_hash stores hashed password
- temp_password stores plain password (for initial email only)
- User should change temp_password on first login
- user_id links to users table

SAMPLE DATABASE RECORDS:
------------------------

users table:
```
+----+-----------+------------------------------------------------------------+
| id | username  | password_hash                                              |
+----+-----------+------------------------------------------------------------+
| 1  | admin     | $2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG |
| 2  | johndoe   | $2y$10$N9qo8uLOickgx2ZMRZoMyeIjZAgcfl7p92ldGxad68LJZ... |
| 3  | janedoe   | $2y$10$abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJ... |
+----+-----------+------------------------------------------------------------+
```

Notice:
- Every hash is different (even for same password)
- All hashes are 60 characters
- All start with $2y$10$ (bcrypt with cost 10)

================================================================================
SECTION 9: COMPLETE FLOW DIAGRAMS
================================================================================

REGISTRATION FLOW
--------------------------------------------------------------------------------

1. USER FILLS REGISTRATION FORM
   ├─ First Name: John
   ├─ Last Name: Doe
   ├─ Email: john@example.com
   └─ Password: MySecurePass123!

2. FORM SUBMISSION TO signup.php
   ├─ Server receives POST data
   ├─ Validates all fields
   ├─ Checks password length (≥8 chars)
   └─ Checks password confirmation match

3. PASSWORD HASHING
   ├─ Input: "MySecurePass123!"
   ├─ Function: password_hash($password, PASSWORD_DEFAULT)
   ├─ Process:
   │   ├─ Generate random salt
   │   ├─ Apply bcrypt algorithm
   │   ├─ Run 1,024 iterations (cost=10)
   │   └─ Combine algorithm + cost + salt + hash
   └─ Output: "$2y$10$N9qo8uLOickgx2ZMRZoMyeIjZAgcfl7p92ldGxad68LJZdL17lhWy"

4. DATABASE INSERTION
   ├─ Prepare SQL statement
   ├─ Bind parameters (username, hash, email, role)
   ├─ Execute INSERT
   └─ Hash stored in password_hash column

5. RESULT
   └─ User created, hash stored, plain password NEVER saved

--------------------------------------------------------------------------------

LOGIN FLOW
--------------------------------------------------------------------------------

1. USER ENTERS CREDENTIALS
   ├─ Email: john@example.com
   └─ Password: MySecurePass123!

2. FORM SUBMISSION TO index.php
   ├─ Server receives POST data
   └─ Calls processLogin() function

3. DATABASE QUERY
   ├─ SELECT password_hash FROM users WHERE email = ?
   └─ Returns: "$2y$10$N9qo8uLOickgx2ZMRZoMyeIjZAgcfl7p92ldGxad68LJZdL17lhWy"

4. PASSWORD VERIFICATION
   ├─ Input 1: "MySecurePass123!" (user provided)
   ├─ Input 2: "$2y$10$N9qo8u..." (from database)
   ├─ Function: password_verify($password, $hash)
   ├─ Process:
   │   ├─ Extract salt from stored hash
   │   ├─ Hash provided password with same salt
   │   ├─ Compare new hash with stored hash
   │   └─ Use timing-safe comparison
   └─ Output: true (match) or false (no match)

5. AUTHENTICATION RESULT
   ├─ If true:
   │   ├─ Create session
   │   ├─ Set session variables
   │   ├─ Initialize propagation tracking
   │   └─ Redirect to dashboard
   └─ If false:
       ├─ Show error message
       ├─ Record failed attempt
       └─ Increment login attempt counter

================================================================================
SECTION 10: SECURITY BEST PRACTICES
================================================================================

WHAT THIS SYSTEM DOES RIGHT ✅
--------------------------------------------------------------------------------

1. ✅ Uses password_hash() with PASSWORD_DEFAULT
   - Industry-standard bcrypt algorithm
   - Automatically handles salt generation
   - Future-proof (will upgrade to newer algorithms)

2. ✅ Never stores plain-text passwords
   - All passwords hashed before storage
   - Database compromise doesn't expose passwords

3. ✅ Uses password_verify() for comparison
   - Timing-safe comparison
   - Handles salt extraction automatically

4. ✅ Sufficient password length requirement (8+ chars)
   - Enforced on client and server side
   - Prevents weak passwords

5. ✅ Password confirmation required
   - Prevents typos during registration
   - Ensures user knows their password

6. ✅ Prepared statements for SQL queries
   - Prevents SQL injection
   - Secure parameter binding

7. ✅ Separate storage for temp passwords
   - Temp passwords for staff can be emailed
   - Encourages password change on first login

ADDITIONAL RECOMMENDATIONS (OPTIONAL ENHANCEMENTS)
--------------------------------------------------------------------------------

1. 🔄 PASSWORD COMPLEXITY REQUIREMENTS
   ```php
   // Require uppercase, lowercase, number, special char
   if (!preg_match('/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/', $password)) {
       $error = 'Password must contain uppercase, lowercase, number, and special character';
   }
   ```

2. 🔄 PASSWORD HISTORY
   ```php
   // Prevent reusing last 3 passwords
   $stmt = $conn->prepare("SELECT password_hash FROM password_history WHERE user_id = ? ORDER BY created_at DESC LIMIT 3");
   foreach ($old_hashes as $old_hash) {
       if (password_verify($new_password, $old_hash)) {
           $error = 'Cannot reuse recent passwords';
       }
   }
   ```

3. 🔄 PASSWORD EXPIRATION
   ```php
   // Force password change every 90 days
   if (strtotime($user['password_changed_at']) < strtotime('-90 days')) {
       redirect_to('change_password.php');
   }
   ```

4. 🔄 INCREASE BCRYPT COST (For higher security)
   ```php
   // Use cost 12 instead of default 10 (4x slower)
   $options = ['cost' => 12];
   $hash = password_hash($password, PASSWORD_BCRYPT, $options);
   ```

5. 🔄 ACCOUNT LOCKOUT
   ```php
   // Lock account after 5 failed attempts
   if ($failed_attempts >= 5) {
       $stmt = $conn->prepare("UPDATE users SET locked = 1 WHERE id = ?");
       // Send unlock email to user
   }
   ```

COMMON MISTAKES TO AVOID ❌
--------------------------------------------------------------------------------

1. ❌ NEVER use MD5 or SHA1 for passwords
   - Too fast, easily cracked
   - No salt, vulnerable to rainbow tables

2. ❌ NEVER store passwords in plain text
   - Database breach exposes all passwords
   - Legal/compliance violations

3. ❌ NEVER use same salt for all passwords
   - password_hash() handles this automatically
   - Manual salting is error-prone

4. ❌ NEVER use weak/predictable passwords
   - Enforce minimum length and complexity
   - Reject common passwords (dictionary words)

5. ❌ NEVER log or display passwords
   - Not in error messages
   - Not in debug logs
   - Not in email (except temp passwords)

6. ❌ NEVER use GET for password forms
   - Passwords visible in URL
   - Stored in browser history
   - Always use POST

================================================================================
SUMMARY: PASSWORD HASHING IN THIS SYSTEM
================================================================================

ALGORITHM: Bcrypt (via password_hash with PASSWORD_DEFAULT)
COST: 10 (2^10 = 1,024 iterations)
SALT: Automatically generated, unique per password
LENGTH: 60 characters (fixed for bcrypt)

HASHING PROCESS:
1. User provides password
2. System calls: password_hash($password, PASSWORD_DEFAULT)
3. PHP generates random salt
4. Bcrypt algorithm applied with cost=10
5. Result stored in database (60-char string)
6. Plain password NEVER stored

VERIFICATION PROCESS:
1. User provides password during login
2. System retrieves hash from database
3. System calls: password_verify($password, $hash)
4. PHP extracts salt from hash
5. PHP hashes provided password with same salt
6. Compares hashes using timing-safe comparison
7. Returns true if match, false if no match

SECURITY FEATURES:
✅ One-way function (cannot reverse)
✅ Unique salt per password
✅ Computationally expensive (slow by design)
✅ Resistant to rainbow table attacks
✅ Resistant to brute-force attacks
✅ Timing-safe comparison
✅ Future-proof (algorithm upgradeable)

FILES WHERE HASHING IS USED:
- signup.php (user registration)
- add_doctor.php (staff registration)
- add_nurse.php (staff registration)
- add_therapist.php (staff registration)
- add_chief_staff.php (staff registration)
- change_admin_password.php (password reset)
- index.php (login verification)

DATABASE TABLES:
- users.password_hash (VARCHAR 255)
- staff.password_hash (VARCHAR 255)

RESULT: Highly secure password storage that protects user credentials even
if the database is compromised. Industry-standard implementation following
PHP security best practices.

================================================================================
END OF DOCUMENTATION
================================================================================

Last Updated: 2025-10-21
Version: 1.0
